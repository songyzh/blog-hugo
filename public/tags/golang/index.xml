<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 每天进步一点点</title>
    <link>https://blog.syzh.fun/tags/golang/</link>
    <description>Recent content in Golang on 每天进步一点点</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sat, 04 Jul 2020 21:00:06 +0800</lastBuildDate><atom:link href="https://blog.syzh.fun/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang踩坑总结-把slice传入函数</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-pitfall-slice-as-argument/</link>
      <pubDate>Sat, 04 Jul 2020 21:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-pitfall-slice-as-argument/</guid>
      <description>问题表现: 把slice传入函数并修改, 所做的append操作在函数外会丢失 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 func main()</description>
    </item>
    
    <item>
      <title>Golang defer语句用法小结</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-defer/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-defer/</guid>
      <description>程序执行到defer语句的时候, 被defer的函数的实参会在此时被求值 1 2 3 4 5 6 7 8 9 10 func a() { i := 0 // 被defer的函数实参会在此时被求值</description>
    </item>
    
    <item>
      <title>Golang sync包用法小结</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-sync/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-sync/</guid>
      <description>sync包提供传统的内存访问的同步机制 WaitGroup 等待若干goroutine执行完毕 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33</description>
    </item>
    
    <item>
      <title>Golang交替打印的几种实现方式</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-goroutine-coordinate/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-goroutine-coordinate/</guid>
      <description>提供了Golang交替打印的几个思路: 使用Goroutine, sync包中的WaitGroup和Cond 使用unbuffered channe</description>
    </item>
    
    <item>
      <title>Golang垃圾回收-三色算法概览</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-garbage-collector-tricolor/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-garbage-collector-tricolor/</guid>
      <description>三色标记-清除算法(tricolor mark-and-sweep algorithm) 把heap中的对象, 用黑色, 灰色, 白色进行标记 黑色对象: 已经以其为root执行过可达性分析的对象 灰色</description>
    </item>
    
    <item>
      <title>Golang踩坑总结-使用下标获取字符串的字符</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-pitfall-string-subscript/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-pitfall-string-subscript/</guid>
      <description>问题表现 使用下标获取字符串的字符时, 可能得到奇怪的字符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func main() { s := &amp;#34;hello&amp;#34; fmt.Printf(&amp;#34;%c\n&amp;#34;, s[1]) s = &amp;#34;你好&amp;#34; fmt.Printf(&amp;#34;%c\n&amp;#34;, s[1]) } //</description>
    </item>
    
    <item>
      <title>Golang踩坑总结-循环中使用Goroutine中捕获参数</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-pitfall-for-goroutine/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-pitfall-for-goroutine/</guid>
      <description>问题表现 goroutine中捕获的循环变量, 都为循环最后的值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func main() { for i, v := range []string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;d&amp;#34;, &amp;#34;e&amp;#34;} { // goro</description>
    </item>
    
    <item>
      <title>Golang踩坑总结-循环中使用闭包捕获参数</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-pitfall-for-closure/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-pitfall-for-closure/</guid>
      <description>问题表现 闭包中捕获的循环变量, 都为循环最后的值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 func main() { // 保存函数闭包 var s []func() for i, v := range []string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;d&amp;#34;, &amp;#34;e&amp;#34;} {</description>
    </item>
    
    <item>
      <title>Golang踩坑总结-接口值是否等于nil</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-pitfall-interface-value-nil/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-pitfall-interface-value-nil/</guid>
      <description>问题表现 具体类型的nil值, 赋值给接口值变量后, 被判定不为nil 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 func main() { // *bytes.Buffer, 零值为ni</description>
    </item>
    
    <item>
      <title>Golang避免使用struct tag</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-reduce-json-db-tag/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-reduce-json-db-tag/</guid>
      <description>最近在用Golang搭建博客后端时, 遇到一个问题: 数据在从mysql到接口输出的json转化中, 需要做字段映射. 常规的方法是写db tag和j</description>
    </item>
    
  </channel>
</rss>
