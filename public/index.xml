<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>每天进步一点点</title>
    <link>https://blog.syzh.fun/</link>
    <description>Recent content on 每天进步一点点</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 15 Aug 2021 17:06:06 +0800</lastBuildDate><atom:link href="https://blog.syzh.fun/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo Zzo Theme</title>
      <link>https://blog.syzh.fun/showcase/hugo/hugo-theme-zzo/</link>
      <pubDate>Sun, 19 Jan 2020 21:13:42 +0900</pubDate>
      
      <guid>https://blog.syzh.fun/showcase/hugo/hugo-theme-zzo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hugo zDoc Theme</title>
      <link>https://blog.syzh.fun/showcase/hugo/hugo-theme-zdoc/</link>
      <pubDate>Sun, 19 Jan 2020 21:13:42 +0900</pubDate>
      
      <guid>https://blog.syzh.fun/showcase/hugo/hugo-theme-zdoc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>读一本好书：《不拘一格：网飞的自由与责任工作法》</title>
      <link>https://blog.syzh.fun/posts/hxd/read-a-good-book-netflix-work/</link>
      <pubDate>Sun, 15 Aug 2021 17:06:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/read-a-good-book-netflix-work/</guid>
      <description>还有公司没有休假制度，想休多久就休多久？还有公司没有差旅和经费审批？毕业以来工作这么多年，怎么说也是职场&amp;quot;老油条&amp;quot;了，这</description>
    </item>
    
    <item>
      <title>formily 2.0之表单校验</title>
      <link>https://blog.syzh.fun/posts/hxd/formily-2-check/</link>
      <pubDate>Sun, 25 Jul 2021 21:19:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/formily-2-check/</guid>
      <description>formily 2.0之表单校验 前言 表单作为web前端在页面中收集、展示信息的媒介，在web前端领域是不可或缺的一部分，但是由于其使用场景的复杂性，导致表</description>
    </item>
    
    <item>
      <title>gRPC在web中的简单使用</title>
      <link>https://blog.syzh.fun/posts/hxd/grpc-web-frontend/</link>
      <pubDate>Sun, 23 May 2021 18:55:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/grpc-web-frontend/</guid>
      <description>gRPC在web中的简单使用 通常我们在web中请求后端数据用的是XMLHttpRequest 或者fetch, 随着前端业务的复杂性增加，还有抽</description>
    </item>
    
    <item>
      <title>从一道面试题来认识react fiber</title>
      <link>https://blog.syzh.fun/posts/hxd/introduce-react-fiber/</link>
      <pubDate>Sat, 27 Mar 2021 21:55:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/introduce-react-fiber/</guid>
      <description>从一道面试题来认识react fiber 最近在看公司的面试题，其中一道就是基于react fiber 来出的算法题，react fiber 提出来也好多年了，于是趁研究这个题</description>
    </item>
    
    <item>
      <title>G6中实现双指拖动范围限制</title>
      <link>https://blog.syzh.fun/posts/hxd/g6-drag/</link>
      <pubDate>Sat, 13 Feb 2021 21:06:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/g6-drag/</guid>
      <description>最近用G6做的一个图结构需求要做拖动范围限制，就是我们不希望用户可以把图完全拖出去画布，这样容易找不到造成困惑的局面，为了支持各种用户的拖动</description>
    </item>
    
    <item>
      <title>react不可变数据之immer的使用</title>
      <link>https://blog.syzh.fun/posts/hxd/react-immer/</link>
      <pubDate>Mon, 28 Dec 2020 22:14:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/react-immer/</guid>
      <description>一 问题： 我们都知道在js 中一个重要的数据类型就是引用数据类型，特征就是相同的引用类型值可以在各个地方被改变： 1 2 3 4 5 var objA = {name: &amp;#39;Alice&amp;#39;}; var objB = objA; objB.name =</description>
    </item>
    
    <item>
      <title>浏览器performance性能优化</title>
      <link>https://blog.syzh.fun/posts/hxd/evaluate-performance/</link>
      <pubDate>Mon, 16 Nov 2020 22:06:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/evaluate-performance/</guid>
      <description>在最近的工作中涉及到了页面大数量的计算和渲染，因为没能很好的利用浏览器开发工具中的perfomance，导致上线后性能遭到了一些吐槽，好在及</description>
    </item>
    
    <item>
      <title>vue3.0的Composition-API</title>
      <link>https://blog.syzh.fun/posts/hxd/vue-3.0-composition-api/</link>
      <pubDate>Thu, 08 Oct 2020 22:40:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/vue-3.0-composition-api/</guid>
      <description>vue3.0已经正式发布了，作为曾经vue2.0的用户当然迫不及待要来认识一下，趁假期有时间赶紧来小试牛刀～ 在查看文档和一些demo的过程中</description>
    </item>
    
    <item>
      <title>react-hooks 初探</title>
      <link>https://blog.syzh.fun/posts/hxd/react-hooks-study/</link>
      <pubDate>Sun, 20 Sep 2020 18:31:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/react-hooks-study/</guid>
      <description>前言 ​ 我们都知道，在用react开发前端应用时，有类组件和函数组件两种形式来编写组件，其中函数组件有自己的状态state，每次调用setSt</description>
    </item>
    
    <item>
      <title>antv.G6 导出全图得到0 bytes 的问题</title>
      <link>https://blog.syzh.fun/posts/hxd/antv-g6-export-pic-zero-bytes/</link>
      <pubDate>Sun, 23 Aug 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/antv-g6-export-pic-zero-bytes/</guid>
      <description>一 问题背景 最近在使用G6 展示树状图的时候需要有导出图片的需求，于是使用graph.downloadFullImage 方法来导出canvas 内</description>
    </item>
    
    <item>
      <title>前端异步解决方案总结</title>
      <link>https://blog.syzh.fun/posts/hxd/front-end-async-a9c14713e59f4677b6d2d9066b32f593/</link>
      <pubDate>Sun, 26 Jul 2020 16:54:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/front-end-async-a9c14713e59f4677b6d2d9066b32f593/</guid>
      <description>在最近一段时间的面试中，前端异步解决方案是一个高频面试题，在此做一个总结回顾。 一、首先从概念上理解，什么是同步异步？ 同步和异步是从消息通知机</description>
    </item>
    
    <item>
      <title>Golang踩坑总结-把slice传入函数</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-pitfall-slice-as-argument/</link>
      <pubDate>Sat, 04 Jul 2020 21:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-pitfall-slice-as-argument/</guid>
      <description>问题表现: 把slice传入函数并修改, 所做的append操作在函数外会丢失 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 func main()</description>
    </item>
    
    <item>
      <title>webpack项目打包优化</title>
      <link>https://blog.syzh.fun/posts/hxd/webpack-optimization/</link>
      <pubDate>Thu, 02 Jul 2020 17:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/webpack-optimization/</guid>
      <description>本文主要是对项目构建优化过程的记录，项目是基于vue3.0脚手架搭件的 首次打包 dist : 15.1 M 1 发现dist/img/icons 中有很多vue-cl</description>
    </item>
    
    <item>
      <title>webpack 学习总结 三</title>
      <link>https://blog.syzh.fun/posts/hxd/webpack-notes-3/</link>
      <pubDate>Thu, 04 Jun 2020 21:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/webpack-notes-3/</guid>
      <description>本文对于webpack 编译出的内容做分析总结。 普通文件引入的打包 1 2 // src/test.js module.exports = &amp;#39;test&amp;#39; 1 2 3 // src/index.js let test = require(&amp;#39;./test&amp;#39;); console.log(test) 打包后的main.js(摘取部分) 1 2 3 4</description>
    </item>
    
    <item>
      <title>webpack 学习总结 二</title>
      <link>https://blog.syzh.fun/posts/hxd/webpack-notes-2/</link>
      <pubDate>Tue, 02 Jun 2020 22:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/webpack-notes-2/</guid>
      <description>上一篇总结了webpack中使用的一些库，这一篇来总结下webpack整体流程,主要根据代码流程来总结。</description>
    </item>
    
    <item>
      <title>webpack 学习总结 一</title>
      <link>https://blog.syzh.fun/posts/hxd/webpack-notes-1/</link>
      <pubDate>Mon, 01 Jun 2020 21:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/webpack-notes-1/</guid>
      <description>webpack 是当前前端项目打包当中非常流行的打包框架，结合丰富的流程钩子函数、插件系统以及nodejs部分功能 给开发者提供了方便配置，易于扩展的打包工</description>
    </item>
    
    <item>
      <title>Golang defer语句用法小结</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-defer/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-defer/</guid>
      <description>程序执行到defer语句的时候, 被defer的函数的实参会在此时被求值 1 2 3 4 5 6 7 8 9 10 func a() { i := 0 // 被defer的函数实参会在此时被求值</description>
    </item>
    
    <item>
      <title>Golang sync包用法小结</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-sync/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-sync/</guid>
      <description>sync包提供传统的内存访问的同步机制 WaitGroup 等待若干goroutine执行完毕 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33</description>
    </item>
    
    <item>
      <title>Golang交替打印的几种实现方式</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-goroutine-coordinate/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-goroutine-coordinate/</guid>
      <description>提供了Golang交替打印的几个思路: 使用Goroutine, sync包中的WaitGroup和Cond 使用unbuffered channe</description>
    </item>
    
    <item>
      <title>Golang垃圾回收-三色算法概览</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-garbage-collector-tricolor/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-garbage-collector-tricolor/</guid>
      <description>三色标记-清除算法(tricolor mark-and-sweep algorithm) 把heap中的对象, 用黑色, 灰色, 白色进行标记 黑色对象: 已经以其为root执行过可达性分析的对象 灰色</description>
    </item>
    
    <item>
      <title>Golang踩坑总结-使用下标获取字符串的字符</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-pitfall-string-subscript/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-pitfall-string-subscript/</guid>
      <description>问题表现 使用下标获取字符串的字符时, 可能得到奇怪的字符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func main() { s := &amp;#34;hello&amp;#34; fmt.Printf(&amp;#34;%c\n&amp;#34;, s[1]) s = &amp;#34;你好&amp;#34; fmt.Printf(&amp;#34;%c\n&amp;#34;, s[1]) } //</description>
    </item>
    
    <item>
      <title>Golang踩坑总结-循环中使用Goroutine中捕获参数</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-pitfall-for-goroutine/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-pitfall-for-goroutine/</guid>
      <description>问题表现 goroutine中捕获的循环变量, 都为循环最后的值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func main() { for i, v := range []string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;d&amp;#34;, &amp;#34;e&amp;#34;} { // goro</description>
    </item>
    
    <item>
      <title>Golang踩坑总结-循环中使用闭包捕获参数</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-pitfall-for-closure/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-pitfall-for-closure/</guid>
      <description>问题表现 闭包中捕获的循环变量, 都为循环最后的值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 func main() { // 保存函数闭包 var s []func() for i, v := range []string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;d&amp;#34;, &amp;#34;e&amp;#34;} {</description>
    </item>
    
    <item>
      <title>Golang踩坑总结-接口值是否等于nil</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-pitfall-interface-value-nil/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-pitfall-interface-value-nil/</guid>
      <description>问题表现 具体类型的nil值, 赋值给接口值变量后, 被判定不为nil 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 func main() { // *bytes.Buffer, 零值为ni</description>
    </item>
    
    <item>
      <title>Golang避免使用struct tag</title>
      <link>https://blog.syzh.fun/posts/syzh/golang-reduce-json-db-tag/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/golang-reduce-json-db-tag/</guid>
      <description>最近在用Golang搭建博客后端时, 遇到一个问题: 数据在从mysql到接口输出的json转化中, 需要做字段映射. 常规的方法是写db tag和j</description>
    </item>
    
    <item>
      <title>JavaScript的继承总结</title>
      <link>https://blog.syzh.fun/posts/hxd/js-inheritance/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/js-inheritance/</guid>
      <description>js的继承总结 本质都是原型链，设置子类的prototype，应用的时候实例属性定义在实例上，通用方法定义在原型链上，达到较好的复用和扩展效果</description>
    </item>
    
    <item>
      <title>博客折腾记(持续更新)</title>
      <link>https://blog.syzh.fun/posts/syzh/blog-system-change-updating/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/blog-system-change-updating/</guid>
      <description>虽然博客不多, 写博客以来的时间不长, 但是折腾并不少&amp;hellip;记录一下这个博客的折腾历程 Golang时期 最初是想写个博客, 巩固一下Gol</description>
    </item>
    
    <item>
      <title>微前端学习总结</title>
      <link>https://blog.syzh.fun/posts/hxd/micro-front-end/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/hxd/micro-front-end/</guid>
      <description>随着公司的发展和项目的迭代，很多团队都维护者一个越来越庞大的前端项目群，其中可能有jquery项目，vue项目，react项目，如何更好的分</description>
    </item>
    
    <item>
      <title>记录一下mac里装的应用</title>
      <link>https://blog.syzh.fun/posts/syzh/my-mac-app/</link>
      <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
      
      <guid>https://blog.syzh.fun/posts/syzh/my-mac-app/</guid>
      <description>mac app 快捷启动: alfred alfred基本算是mac必备app了, 主要用到的功能如下 快捷启动 文件搜索 snippets短语扩展 计算器 字典 密码管理1pas</description>
    </item>
    
    <item>
      <title>Fourth</title>
      <link>https://blog.syzh.fun/presentation/dir/fourth/</link>
      <pubDate>Wed, 30 Oct 2019 20:48:10 +0900</pubDate>
      
      <guid>https://blog.syzh.fun/presentation/dir/fourth/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Third</title>
      <link>https://blog.syzh.fun/presentation/third/</link>
      <pubDate>Wed, 30 Oct 2019 20:46:30 +0900</pubDate>
      
      <guid>https://blog.syzh.fun/presentation/third/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Second</title>
      <link>https://blog.syzh.fun/presentation/second/</link>
      <pubDate>Wed, 30 Oct 2019 20:45:24 +0900</pubDate>
      
      <guid>https://blog.syzh.fun/presentation/second/</guid>
      <description></description>
    </item>
    
    <item>
      <title>First</title>
      <link>https://blog.syzh.fun/presentation/first/</link>
      <pubDate>Wed, 30 Oct 2019 19:45:20 +0900</pubDate>
      
      <guid>https://blog.syzh.fun/presentation/first/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://blog.syzh.fun/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.syzh.fun/about/</guid>
      <description>小站的评论系统使用了utterances, 基于GitHub issues, 因此可能需要科学上网支持 不方便的同学, 欢迎通过每篇博文底部的作者邮箱或Githu</description>
    </item>
    
    <item>
      <title>Good Title</title>
      <link>https://blog.syzh.fun/publication/article/article_any_folder_name_1/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.syzh.fun/publication/article/article_any_folder_name_1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Donec vel ipsum vulputate, dapibus magna quis</title>
      <link>https://blog.syzh.fun/publication/book/book_any_folder_name_1/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.syzh.fun/publication/book/book_any_folder_name_1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Book Review: Duis vulputate</title>
      <link>https://blog.syzh.fun/publication/misc/misc_any_folder_name_1/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.syzh.fun/publication/misc/misc_any_folder_name_1/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
