<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Posts on 卓&amp;东的小窝</title>
    <link>https://blog.syzh.fun/posts/</link>
    <description>Recent content in Posts on 卓&amp;东的小窝</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 01 Jun 2020 21:00:06 +0800</lastBuildDate>
    <sy:updatePeriod>daily</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    
        <atom:link href="https://blog.syzh.fun/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>webpack 学习总结 一</title>
        <link>https://blog.syzh.fun/posts/hxd/webpack-notes-1/</link>
        <pubDate>Mon, 01 Jun 2020 21:00:06 +0800</pubDate>
        
        <atom:modified>Mon, 01 Jun 2020 21:00:06 +0800</atom:modified>
        <guid>https://blog.syzh.fun/posts/hxd/webpack-notes-1/</guid>
        <description>webpack 是当前前端项目打包当中非常流行的打包框架，结合丰富的流程钩子函数、插件系统以及nodejs部分功能 给开发者提供了方便配置，易于扩展的打包工</description>
        
        <dc:creator>东</dc:creator>
        <media:content url="https://blog.syzh.funhttps://tva1.sinaimg.cn/large/007S8ZIlgy1gfd4lqjr4hj30zk0ic0u1.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>前端</category>
            
          
            
              <category>webpack</category>
            
          
        
        
          
            
              <category>技术</category>
            
          
        
        
          
            
              <category>webpack学习总结</category>
            
          
        
      </item>
      
      <item>
        <title>Golang defer语句用法小结</title>
        <link>https://blog.syzh.fun/posts/syzh/golang-defer/</link>
        <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
        
        <atom:modified>Sun, 24 May 2020 12:00:06 +0800</atom:modified>
        <guid>https://blog.syzh.fun/posts/syzh/golang-defer/</guid>
        <description>程序执行到defer语句的时候, 被defer的函数的实参会在此时被求值 1 2 3 4 5 6 7 8 9 10 func a() { i := 0 // 被defer的函数实参会在此时被求值</description>
        
        <dc:creator>卓</dc:creator>
        <media:content url="https://blog.syzh.funhttps://tva1.sinaimg.cn/large/007S8ZIlgy1gequsxb9r0j30hq0dbmy7.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>后端</category>
            
          
            
              <category>Golang</category>
            
          
        
        
          
            
              <category>技术</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Golang sync包用法小结</title>
        <link>https://blog.syzh.fun/posts/syzh/golang-sync/</link>
        <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
        
        <atom:modified>Sun, 24 May 2020 12:00:06 +0800</atom:modified>
        <guid>https://blog.syzh.fun/posts/syzh/golang-sync/</guid>
        <description>sync包提供传统的内存访问的同步机制 WaitGroup 等待若干goroutine执行完毕 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33</description>
        
        <dc:creator>卓</dc:creator>
        <media:content url="https://blog.syzh.funhttps://tva1.sinaimg.cn/large/007S8ZIlgy1gepo1j18koj30m80bc40e.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>后端</category>
            
          
            
              <category>Golang</category>
            
          
            
              <category>GoSync</category>
            
          
        
        
          
            
              <category>技术</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Golang交替打印的几种实现方式</title>
        <link>https://blog.syzh.fun/posts/syzh/golang-goroutine-coordinate/</link>
        <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
        
        <atom:modified>Sun, 24 May 2020 12:00:06 +0800</atom:modified>
        <guid>https://blog.syzh.fun/posts/syzh/golang-goroutine-coordinate/</guid>
        <description>提供了Golang交替打印的几个思路: 使用Goroutine, sync包中的WaitGroup和Cond 使用unbuffered channe</description>
        
        <dc:creator>卓</dc:creator>
        <media:content url="https://blog.syzh.funhttps://tva1.sinaimg.cn/large/007S8ZIlgy1geome7841kj30jg0adt8y.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>后端</category>
            
          
            
              <category>Golang</category>
            
          
            
              <category>Goroutine</category>
            
          
            
              <category>GoChannel</category>
            
          
            
              <category>GoSync</category>
            
          
        
        
          
            
              <category>技术</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Golang垃圾回收-三色算法概览</title>
        <link>https://blog.syzh.fun/posts/syzh/golang-garbage-collector-tricolor/</link>
        <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
        
        <atom:modified>Sun, 24 May 2020 12:00:06 +0800</atom:modified>
        <guid>https://blog.syzh.fun/posts/syzh/golang-garbage-collector-tricolor/</guid>
        <description>三色标记-清除算法(tricolor mark-and-sweep algorithm) 把heap中的对象, 用黑色, 灰色, 白色进行标记 黑色对象: 已经以其为root执行过可达性分析的对象 灰色</description>
        
        <dc:creator>卓</dc:creator>
        <media:content url="https://blog.syzh.funhttps://tva1.sinaimg.cn/large/007S8ZIlgy1geotk98c56j314n0u0dk8.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>后端</category>
            
          
            
              <category>Golang</category>
            
          
            
              <category>垃圾回收</category>
            
          
        
        
          
            
              <category>技术</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Golang踩坑总结-使用下标获取字符串的字符</title>
        <link>https://blog.syzh.fun/posts/syzh/golang-pitfall-string-subscript/</link>
        <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
        
        <atom:modified>Sun, 24 May 2020 12:00:06 +0800</atom:modified>
        <guid>https://blog.syzh.fun/posts/syzh/golang-pitfall-string-subscript/</guid>
        <description>问题表现 使用下标获取字符串的字符时, 可能得到奇怪的字符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func main() { s := &amp;#34;hello&amp;#34; fmt.Printf(&amp;#34;%c\n&amp;#34;, s[1]) s = &amp;#34;你好&amp;#34; fmt.Printf(&amp;#34;%c\n&amp;#34;, s[1]) } //</description>
        
        <dc:creator>卓</dc:creator>
        <media:content url="https://blog.syzh.funhttps://tva1.sinaimg.cn/large/007S8ZIlgy1ger268h4gdj30ix0ajjt5.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>后端</category>
            
          
            
              <category>Golang</category>
            
          
            
              <category>踩坑</category>
            
          
        
        
          
            
              <category>技术</category>
            
          
        
        
          
            
              <category>Golang踩坑总结</category>
            
          
        
      </item>
      
      <item>
        <title>Golang踩坑总结-循环中使用Goroutine中捕获参数</title>
        <link>https://blog.syzh.fun/posts/syzh/golang-pitfall-for-goroutine/</link>
        <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
        
        <atom:modified>Sun, 24 May 2020 12:00:06 +0800</atom:modified>
        <guid>https://blog.syzh.fun/posts/syzh/golang-pitfall-for-goroutine/</guid>
        <description>问题表现 goroutine中捕获的循环变量, 都为循环最后的值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func main() { for i, v := range []string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;d&amp;#34;, &amp;#34;e&amp;#34;} { // goro</description>
        
        <dc:creator>卓</dc:creator>
        <media:content url="https://blog.syzh.funhttps://tva1.sinaimg.cn/large/007S8ZIlgy1ger23ueqcgj30h00bcmxs.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>后端</category>
            
          
            
              <category>Golang</category>
            
          
            
              <category>踩坑</category>
            
          
            
              <category>Goroutine</category>
            
          
        
        
          
            
              <category>技术</category>
            
          
        
        
          
            
              <category>Golang踩坑总结</category>
            
          
        
      </item>
      
      <item>
        <title>Golang踩坑总结-循环中使用闭包捕获参数</title>
        <link>https://blog.syzh.fun/posts/syzh/golang-pitfall-for-closure/</link>
        <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
        
        <atom:modified>Sun, 24 May 2020 12:00:06 +0800</atom:modified>
        <guid>https://blog.syzh.fun/posts/syzh/golang-pitfall-for-closure/</guid>
        <description>问题表现 闭包中捕获的循环变量, 都为循环最后的值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 func main() { // 保存函数闭包 var s []func() for i, v := range []string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;d&amp;#34;, &amp;#34;e&amp;#34;} {</description>
        
        <dc:creator>卓</dc:creator>
        <media:content url="https://blog.syzh.funhttps://tva1.sinaimg.cn/large/007S8ZIlgy1geon92s5ajj31e40p0dji.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>后端</category>
            
          
            
              <category>Golang</category>
            
          
            
              <category>踩坑</category>
            
          
            
              <category>闭包</category>
            
          
        
        
          
            
              <category>技术</category>
            
          
        
        
          
            
              <category>Golang踩坑总结</category>
            
          
        
      </item>
      
      <item>
        <title>Golang踩坑总结-接口值是否等于nil</title>
        <link>https://blog.syzh.fun/posts/syzh/golang-pitfall-interface-value-nil/</link>
        <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
        
        <atom:modified>Sun, 24 May 2020 12:00:06 +0800</atom:modified>
        <guid>https://blog.syzh.fun/posts/syzh/golang-pitfall-interface-value-nil/</guid>
        <description>问题表现 具体类型的nil值, 赋值给接口值变量后, 被判定不为nil 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 func main() { // *bytes.Buffer, 零值为ni</description>
        
        <dc:creator>卓</dc:creator>
        <media:content url="https://blog.syzh.funhttps://tva1.sinaimg.cn/large/007S8ZIlgy1ger1z2llizj30go0go75m.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>后端</category>
            
          
            
              <category>Golang</category>
            
          
            
              <category>踩坑</category>
            
          
        
        
          
            
              <category>技术</category>
            
          
        
        
          
            
              <category>Golang踩坑总结</category>
            
          
        
      </item>
      
      <item>
        <title>Golang避免使用struct tag</title>
        <link>https://blog.syzh.fun/posts/syzh/golang-reduce-json-db-tag/</link>
        <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
        
        <atom:modified>Sun, 24 May 2020 12:00:06 +0800</atom:modified>
        <guid>https://blog.syzh.fun/posts/syzh/golang-reduce-json-db-tag/</guid>
        <description>最近在用Golang搭建博客后端时, 遇到一个问题: 数据在从mysql到接口输出的json转化中, 需要做字段映射. 常规的方法是写db tag和j</description>
        
        <dc:creator>卓</dc:creator>
        <media:content url="https://blog.syzh.funhttps://tva1.sinaimg.cn/large/006tNbRwgy1g9m3dglipwj30dw092acv.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>后端</category>
            
          
            
              <category>Golang</category>
            
          
        
        
          
            
              <category>技术</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>JavaScript的继承总结</title>
        <link>https://blog.syzh.fun/posts/hxd/js-inheritance/</link>
        <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
        
        <atom:modified>Sun, 24 May 2020 12:00:06 +0800</atom:modified>
        <guid>https://blog.syzh.fun/posts/hxd/js-inheritance/</guid>
        <description>js的继承总结 本质都是原型链，设置子类的prototype，应用的时候实例属性定义在实例上，通用方法定义在原型链上，达到较好的复用和扩展效果</description>
        
        <dc:creator>东</dc:creator>
        <media:content url="https://blog.syzh.funhttps://tva1.sinaimg.cn/large/007S8ZIlgy1gekw11opskj312w0jgq5b.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>前端</category>
            
          
            
              <category>JavaScript</category>
            
          
        
        
          
            
              <category>技术</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>博客折腾记(持续更新)</title>
        <link>https://blog.syzh.fun/posts/syzh/blog-system-change-updating/</link>
        <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
        
        <atom:modified>Sun, 24 May 2020 12:00:06 +0800</atom:modified>
        <guid>https://blog.syzh.fun/posts/syzh/blog-system-change-updating/</guid>
        <description>虽然博客不多, 写博客以来的时间不长, 但是折腾并不少&amp;hellip;记录一下这个博客的折腾历程 Golang时期 最初是想写个博客, 巩固一下Gol</description>
        
        <dc:creator>卓</dc:creator>
        <media:content url="https://blog.syzh.funhttps://tva1.sinaimg.cn/large/006tNbRwgy1g9m3dglipwj30dw092acv.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>博客</category>
            
          
        
        
          
            
              <category>技术</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>微前端学习总结</title>
        <link>https://blog.syzh.fun/posts/hxd/micro-front-end/</link>
        <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
        
        <atom:modified>Sun, 24 May 2020 12:00:06 +0800</atom:modified>
        <guid>https://blog.syzh.fun/posts/hxd/micro-front-end/</guid>
        <description>随着公司的发展和项目的迭代，很多团队都维护者一个越来越庞大的前端项目群，其中可能有jquery项目，vue项目，react项目，如何更好的分</description>
        
        <dc:creator>东</dc:creator>
        <media:content url="https://blog.syzh.funhttps://tva1.sinaimg.cn/large/007S8ZIlgy1geqn29e6cjj30m80c80t5.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>前端</category>
            
          
        
        
          
            
              <category>技术</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>记录一下mac里装的应用</title>
        <link>https://blog.syzh.fun/posts/syzh/my-mac-app/</link>
        <pubDate>Sun, 24 May 2020 12:00:06 +0800</pubDate>
        
        <atom:modified>Sun, 24 May 2020 12:00:06 +0800</atom:modified>
        <guid>https://blog.syzh.fun/posts/syzh/my-mac-app/</guid>
        <description>mac app 快捷启动: alfred alfred基本算是mac必备app了, 主要用到的功能如下 快捷启动 文件搜索 snippets短语扩展 计算器 字典 密码管理1pas</description>
        
        <dc:creator>卓</dc:creator>
        <media:content url="https://blog.syzh.funhttps://tva1.sinaimg.cn/large/007S8ZIlgy1gevsf7pflaj30xc0m8q3k.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>MacOS</category>
            
          
        
        
          
            
              <category>生活</category>
            
          
        
        
          
            
          
        
      </item>
      

    
  </channel>
</rss>